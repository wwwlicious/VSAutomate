//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VSAutomate {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class RS {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal RS() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("VSAutomate.RS", typeof(RS).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;Dictionary&gt;
        ///  &lt;Words&gt;
        ///    &lt;!-- 
        ///      This is a list of case-insensitive words that exist in the dictionary
        ///      but you do not want to be recognized by IdentifiersShouldBeSpelledCorrectly.
        ///      Do not add deprecated terms to this list, instead add these to the 
        ///      &lt;Deprecated&gt; section below.
        ///    --&gt;
        ///    &lt;Unrecognized&gt;
        ///      &lt;Word&gt;cb&lt;/Word&gt;
        ///      &lt;Word&gt;ch&lt;/Word&gt;
        ///      &lt;Word&gt;csc&lt;/Word&gt;
        ///      &lt;Word&gt;elem&lt;/Word&gt;
        ///      &lt;Word&gt;gt&lt;/Word&gt;
        ///      &lt;Word&gt;idx&lt;/Word&gt;
        ///      &lt;Wo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CustomDictionary {
            get {
                return ResourceManager.GetString("CustomDictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;RuleSet Name=&quot;Default Code Rules&quot; Description=&quot;This rule set contains all rules. Running this rule set may result in a large number of warnings being reported. Use this rule set to get a comprehensive picture of all issues in your code. This can help you decide which of the more focused rule sets are most appropriate to run for your projects.&quot; ToolsVersion=&quot;10.0&quot;&gt;
        ///  &lt;IncludeAll Action=&quot;Warning&quot; /&gt;
        ///  &lt;Rules AnalyzerId=&quot;Microsoft.Analyzers.ManagedCodeAnalysis&quot; RuleNames [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Default_ruleset {
            get {
                return ResourceManager.GetString("Default_ruleset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // --------------------------------------------------------------------------------------------------------------------
        ///// &lt;copyright file=&quot;GlobalAssemblyInfo.cs&quot; company=&quot;{company}&quot;&gt;
        /////   Copyright (c) All Rights Reserved
        ///// &lt;/copyright&gt;
        ///// --------------------------------------------------------------------------------------------------------------------
        ///
        ///using System;
        ///using System.Reflection;
        ///using System.Resources;
        ///using System.Runtime.InteropServices;
        ///
        ///// General Information about an assembl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GlobalAssemblyInfo {
            get {
                return ResourceManager.GetString("GlobalAssemblyInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # {0}
        ///
        ///##About
        ///
        ///
        ///##Getting started
        ///
        ///
        ///To learn more about the markdown syntax, refer to these links:
        ///
        /// - [Markdown Syntax Guide](http://daringfireball.net/projects/markdown/syntax)
        /// - [Markdown Basics](http://daringfireball.net/projects/markdown/basics)
        /// - [GitHub Flavored Markdown](http://github.github.com/github-flavored-markdown/) 
        /// - [markdown at wikipedia](https://secure.wikimedia.org/wikipedia/en/wiki/Markdown).
        /// </summary>
        internal static string readme {
            get {
                return ResourceManager.GetString("readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;StyleCopSettings Version=&quot;4.3&quot;&gt;
        ///  &lt;GlobalSettings&gt;
        ///    &lt;StringProperty Name=&quot;LinkedSettingsFile&quot;&gt;{0}&lt;/StringProperty&gt;
        ///    &lt;StringProperty Name=&quot;MergeSettingsFiles&quot;&gt;Linked&lt;/StringProperty&gt;
        ///  &lt;/GlobalSettings&gt;
        ///&lt;/StyleCopSettings&gt;.
        /// </summary>
        internal static string settings_stylecop_project {
            get {
                return ResourceManager.GetString("settings_stylecop_project", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;StyleCopSettings Version=&quot;105&quot;&gt;
        ///  &lt;GlobalSettings&gt;
        ///    &lt;StringProperty Name=&quot;MergeSettingsFiles&quot;&gt;NoMerge&lt;/StringProperty&gt;
        ///    &lt;BooleanProperty Name=&quot;AutoCheckForUpdate&quot;&gt;False&lt;/BooleanProperty&gt;
        ///    &lt;StringProperty Name=&quot;Culture&quot;&gt;{culture}&lt;/StringProperty&gt;
        ///  &lt;/GlobalSettings&gt;
        ///  &lt;Parsers&gt;
        ///    &lt;Parser ParserId=&quot;StyleCop.CSharp.CsParser&quot;&gt;
        ///      &lt;ParserSettings&gt;
        ///        &lt;BooleanProperty Name=&quot;AnalyzeDesignerFiles&quot;&gt;False&lt;/BooleanProperty&gt;
        ///      &lt;/ParserSettings&gt;
        ///    &lt;/Parser&gt;
        ///  &lt;/Parsers&gt;
        ///  &lt;Analyzers&gt;
        ///    &lt;Analy [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string settings_stylecop_solution {
            get {
                return ResourceManager.GetString("settings_stylecop_solution", resourceCulture);
            }
        }
    }
}
